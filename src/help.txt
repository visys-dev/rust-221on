У Rust типи на кшталт `u32`, `u8` представляють **беззнакові** (unsigned) цілі числа, які не можуть бути від'ємними. Вони зберігають тільки додатні значення та нуль. Кількість можливих значень залежить від кількості біт, виділених під ці числа.

Ось діапазони для найчастіше використовуваних числових типів у Rust:

### Беззнакові цілі числа (unsigned integers):
- **`u8`**: зберігається в 8 бітів
  - Мінімум: `0`
  - Максимум: `255` (2^8 - 1)
  
- **`u16`**: зберігається в 16 бітів
  - Мінімум: `0`
  - Максимум: `65,535` (2^16 - 1)
  
- **`u32`**: зберігається в 32 біти
  - Мінімум: `0`
  - Максимум: `4,294,967,295` (2^32 - 1)
  
- **`u64`**: зберігається в 64 біти
  - Мінімум: `0`
  - Максимум: `18,446,744,073,709,551,615` (2^64 - 1)
  
- **`u128`**: зберігається в 128 бітів
  - Мінімум: `0`
  - Максимум: `340,282,366,920,938,463,463,374,607,431,768,211,455` (2^128 - 1)

- **`usize`**: розмір залежить від архітектури системи (32 біти на 32-бітових системах, 64 біти на 64-бітових системах):
  - На 32-бітній системі: 
    - Мінімум: `0`
    - Максимум: `4,294,967,295` (2^32 - 1)
  - На 64-бітній системі:
    - Мінімум: `0`
    - Максимум: `18,446,744,073,709,551,615` (2^64 - 1)

### Знакові цілі числа (signed integers):
Знакові типи дозволяють зберігати як додатні, так і від'ємні числа.

- **`i8`**: зберігається в 8 бітів
  - Мінімум: `-128`
  - Максимум: `127` (від -2^7 до 2^7 - 1)
  
- **`i16`**: зберігається в 16 бітів
  - Мінімум: `-32,768`
  - Максимум: `32,767` (від -2^15 до 2^15 - 1)
  
- **`i32`**: зберігається в 32 біти
  - Мінімум: `-2,147,483,648`
  - Максимум: `2,147,483,647` (від -2^31 до 2^31 - 1)
  
- **`i64`**: зберігається в 64 біти
  - Мінімум: `-9,223,372,036,854,775,808`
  - Максимум: `9,223,372,036,854,775,807` (від -2^63 до 2^63 - 1)
  
- **`i128`**: зберігається в 128 бітів
  - Мінімум: `-170,141,183,460,469,231,731,687,303,715,884,105,728`
  - Максимум: `170,141,183,460,469,231,731,687,303,715,884,105,727` (від -2^127 до 2^127 - 1)

- **`isize`**: розмір залежить від архітектури системи:
  - На 32-бітній системі:
    - Мінімум: `-2,147,483,648`
    - Максимум: `2,147,483,647`
  - На 64-бітній системі:
    - Мінімум: `-9,223,372,036,854,775,808`
    - Максимум: `9,223,372,036,854,775,807`

### Дійсні числа з плаваючою комою:
Ці типи використовуються для зберігання чисел з дробовою частиною.

- **`f32`**: дійсне число з плаваючою комою, 32 біти (одинарна точність).
- **`f64`**: дійсне число з плаваючою комою, 64 біти (подвійна точність, тип за замовчуванням для чисел з плаваючою точкою в Rust).

### Ось зведена таблиця мінімальних і максимальних значень:

| Тип   | Мінімум                          | Максимум                            |
|-------|-----------------------------------|-------------------------------------|
| `u8`  | 0                                 | 255                                 |
| `u16` | 0                                 | 65,535                              |
| `u32` | 0                                 | 4,294,967,295                       |
| `u64` | 0                                 | 18,446,744,073,709,551,615          |
| `u128`| 0                                 | 340,282,366,920,938,463,463,374,607,431,768,211,455 |
| `usize`| 0                                | Залежить від архітектури            |
| `i8`  | -128                              | 127                                 |
| `i16` | -32,768                           | 32,767                              |
| `i32` | -2,147,483,648                    | 2,147,483,647                       |
| `i64` | -9,223,372,036,854,775,808        | 9,223,372,036,854,775,807           |
| `i128`| -170,141,183,460,469,231,731,687,303,715,884,105,728 | 170,141,183,460,469,231,731,687,303,715,884,105,727 |
| `isize`| Залежить від архітектури          | Залежить від архітектури            | 

Ці типи дозволяють вибирати відповідний обсяг пам'яті для числа в залежності від його діапазону значень.


У Rust char займає 4 байти (32 біти) незалежно від того, який саме символ це (ASCII чи Юнікод). Це тому, що Rust зберігає символи в UTF-32 форматі для внутрішнього представлення, навіть якщо це простий ASCII символ.

Функція з додаванням ; - має повернути змінну, без додавання ; - повертає значення